import json

from openai import OpenAI
from bazaarAPI import BazaarAPI
import logging

bazaar = BazaarAPI()
client = OpenAI()

logger = logging.getLogger("openAPI")
logger.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger.info("Logger setup complete")


instructions = ("You are a helpful assistant designed to review and explain the trends of the "
				"item in the json provided that has information of the item in the hypixel skyblock bazaar. "
				"You are to describe and analyse the current statistics of the item in a way that is easy to"
				" understand and creates a clear and concise info report on the item stats. You must also use logic and"
				" advanced reasoning to determine if the item economy could be falsely manipulated."
				"Once the user sends the data, you must respond with the prior instructions, but in the format of"
				"This entire response must be formatted in .md format, and at the very bottom of the output"
				" must be a disclaimer"
				"saying \"This was generated by a chatGPT API, coded by Mrmii321/Soapchan\". You must strictly follow"
				" all conventions listed above."
				"You are required to use the exact template:"
				"```md"
				"#{item_name}"
				"### Sell:"
				"- Lowest price: {lowest_sell_price} coins | {sell_quantity_lowest} available"
				"- Highest price: {highest_sell_price} coins | {sell_quantity_highest} available"
				"- Total volume: {total_sell_volume}"
				"#### {Short description of sell data (20 words min)}"
				"### Buy:"
				"- Highest price: {highest_buy_price} coins | {buy_quantity_highest} available"
				"- Lowest price: {lowest_buy_price} coins | {buy_quantity_lowest} available"
				"- Total volume: {total_buy_volume}"
				"#### {Short description of buy data (20 words min)}"

				"### Overall Analysis:"
				"- The ratio of buy_price:sell_price is {lowest_buy}:{highest_sell ratio}."
				"- There is a {accurate description of cost difference} between the highest buy and lowest sell prices."
				"- {Explain why or why not it would or wouldn't be profitable to perform bazaar flipping on this item}"
				"#### {Short description of overall data (50 words min)}"
				"BazaarGPT is brought to you by Mrmii32/Soapchan```. ")


class OpenAPI:
	"""The main class of the AI"""
	def __init__(self, max_tokens, model, item):
		self.model = model
		self.item = item
		self.max_tokens = max_tokens
		self.response = None  # this stores the output json data. Use this when getting data.


	def get_item_data(self, item_name, debug_mode):
		"""Singles out the selected item from the rest of the bazaar"""
		data = bazaar.get_bazaar_data()
		products = data.get('products', {})
		item_data = products.get(item_name)
		if item_data:
			logger.info(f"Item {item_name} data successfully received")
			if debug_mode:
				print(json.dumps(item_data, indent=4))
			return item_data
		else:
			raise Exception(f"Item ({item_name}) not found")


	def item_debug_output(self):
		"""Item JSON details for external use"""
		pass


	def run_ai(self):
		"""The main AI function"""
		response = client.chat.completions.create(
			model=self.model,
			messages=[
				{"role": "system", "content": f"{instructions}"},
				{"role": "user", "content": f"The item is {self.item}"}
			],
			max_tokens=self.max_tokens,
		)
		logger.info("openAI API call complete")
		return response


	def response_runner(self):
		"""Indents the output JSON."""
		self.response = self.run_ai()


	def output_info(self):
		"""gets the output json and message"""
		json_response = self.response.model_dump_json(indent=4)
		logger.info("Converted API output into JSON")

		print(json_response)

		message = self.response.choices[0].message.content

		# prints the message
		print(message)
